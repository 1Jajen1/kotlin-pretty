
apply plugin: 'maven'

def findProperty(String key) {
    [project.properties[key], System.getenv(key)].find { it != null }
}

def getReleaseRepositoryUrl() {
    return findProperty('RELEASE_REPOSITORY_URL') ?: "https://api.bintray.com/maven/jannis/kotlin-pretty/kotlin-pretty"
}

def getRepositoryUsername() {
    return findProperty('BINTRAY_USER') ?: "no.bintray.user"
}

def getRepositoryPassword() {
    return findProperty('BINTRAY_KEY') ?: "no.bintray.api.key"
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        repository(url: getReleaseRepositoryUrl()) {
            authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
            name POM_NAME
            packaging POM_PACKAGING
            description POM_DESCRIPTION
            url POM_URL

            scm {
                url POM_SCM_URL
                connection POM_SCM_CONNECTION
                developerConnection POM_SCM_DEV_CONNECTION
            }

            licenses {
                license {
                    name POM_LICENCE_NAME
                    url POM_LICENCE_URL
                    distribution POM_LICENCE_DIST
                }
            }

            developers {
                developer {
                    id POM_DEVELOPER_ID
                    name POM_DEVELOPER_NAME
                }
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
            name POM_NAME
            packaging POM_PACKAGING
            description POM_DESCRIPTION
            url POM_URL

            scm {
                url POM_SCM_URL
                connection POM_SCM_CONNECTION
                developerConnection POM_SCM_DEV_CONNECTION
            }

            licenses {
                license {
                    name POM_LICENCE_NAME
                    url POM_LICENCE_URL
                    distribution POM_LICENCE_DIST
                }
            }

            developers {
                developer {
                    id POM_DEVELOPER_ID
                    name POM_DEVELOPER_NAME
                }
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource + 'build/generated/source/kapt/main', 'build/generated/source/kaptKotlin/main'
}

artifacts {
    archives sourcesJar
}